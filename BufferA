// Number of balls.
#define BALLS 100

// Radius of balls.
#define R 0.01

//Health states
#define HEALTHY 0.0
#define INFECTED 1.0
#define RECOVERED 3.0
#define DEAD 4.0
//Death rate in percentage, here, 7% mortality
#define DEATHRATE 7 

// This function returns where in iChannel0, the position of ball "v" is.
vec2 BallVarPos(int v) {
  float vf = float(v);
  vec2 xy = vec2(mod(vf, iChannelResolution[0].x),
                 floor(vf / iChannelResolution[0].x));
  xy += vec2(0.5);
  xy /= iChannelResolution[0].xy;
  return xy;
}

// Given a position in iChannel0, return which ball position is stored there.
int BallNum(vec2 xy) {
  xy *= iChannelResolution[0].xy;
  xy = floor(xy);
  return int(xy.x + xy.y * iChannelResolution[0].x);
}

// Return a "random" number.
highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

//Random for initialization of infecteds
float random( vec2 p )
{
    vec2 K1 = vec2(23.14069263277926, 2.665144142690225);
    return fract( cos( dot(p,K1) ) * 12345.6789 );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord.xy / iResolution.xy;
    // Figure out which ball we're currently processing.
    int ball = BallNum(uv);
    if (ball < 0 || ball >= BALLS) discard;

    // The four channels are used to store position and speed of each ball.
    vec4 posandspeed = texture(iChannel0, uv);
    vec2 pos = posandspeed.xy;
    float timer = posandspeed.w;
    float state = posandspeed.z;

    // Iterate through all the balls.
    for (int i = 0; i < BALLS; i++) {
		// If it's the same ball, ignore it.
        if (i == ball) continue;

        // Get the position and speed of ball i.
        vec4 p = texture(iChannel0, BallVarPos(i)); 
        
        //Get the state of p
        float pstate = p.z;

        // Calculate the distance between the centers of the two balls.
        float dist = length(p.xy - pos);

        // If it's smaller than the diameter, we have a collision.
        if (dist < R * 2.0) {
            // Also, move the ball away to make sure we're not colliding anymore.
            pos = p.xy + (pos - p.xy) * R * 2.01 / dist;
            
            //If touches an infected, becomes infected too, and starts the timer
            if(pstate == INFECTED && state == HEALTHY){
                state = INFECTED;
                timer = 0.0;
            }
        }
    }   
    
    //Timer gestion
    if(timer != -1.0){
        timer++;
        //If infected for 7s, decides if recovered or dead
        if(timer == 420.0){
            //If falls in the death rate, dies, loses all speed, becomes grey
            if(iFrame*10 % DEATHRATE == 0){
                state = DEAD;
            } else {	//Else, recovers, keeps speed, becomes blue
                state = RECOVERED;
            }
        }
    }

    // Move the ball if it's not dead
    if(state != DEAD) {
    	pos += vec2((rand(uv + vec2(0.1))-0.5) / 150.0,
        	        (rand(uv + vec2(0.2))-0.5) / 150.0);
    }

    // If we reach the bottom, invert the speed in the y direction.
    if (pos.y < 0.0 + R) { pos.y = 0.5625 - R;}
    if (pos.y > 0.5625 - R) { pos.y = 0.0 + R ;}

    // If we reach left/right wall, invert the speed in the x direction. 
    if (pos.x < 0.0 + R) { pos.x = 1.0 - R; }
    if (pos.x > 1.0 - R) { pos.x = 0.0 + R; }

    // If this is the first frame, initialize position and speed to something random.
    if (iFrame == 1) {
        pos = vec2(rand(uv), rand(uv.yx));
        state = HEALTHY;
        timer = -1.0;
        
        //Generates a small number of infecteds at step 1
        if(random(fragCoord) < 0.05) {
    		state = INFECTED;
        	timer = 0.0;
        }
        
    }
    // Store position and speed in the output (which is also iChannel0).
    fragColor = vec4(pos, state, timer);
}